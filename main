#GUI Tutorial used: https://www.blog.pythonlibrary.org/2021/09/29/create-gui/



import wx
import wx.adv
from datetime import datetime
import csv
import numpy as np

global savefile 
savefile ='redcalendar.csv'


#def showdata():
def createentry(year, month, day, first, blood, pain, painkiller):
        
        
        with open(savefile, 'a', newline='') as f:
            writer = csv.writer(f)
            writer.writerow([year, month, day,first, blood, pain, painkiller])
        f.close()

def getpastentries():
    pastentries = []
    f = open(savefile)
    limit=100
    counter=0
    rowcount = sum(1 for line in f)
    if rowcount > limit:
        skip = rowcount - limit
    else:
        skip = 0
    with open(savefile, 'r', newline='') as f:
            reader = csv.reader(f)
            for row in reader:
                if counter >= skip:
                    strlist=row[0:3]
                    intlist=[eval(i) for i in strlist]
                    pastentries.append(intlist)
                counter = counter + 1
    f.close()
    return(pastentries)

def getmonthentries(month):
    pastentries=getpastentries()
    pastentries = [row for row in pastentries if row[1]==month]
    return([row[2] for row in pastentries])






class MyPanel(wx.Panel):
    now = datetime.now()

    year = int(now.strftime("%Y"))
    month = int(now.strftime("%m"))
    day = int(now.strftime("%d"))
    firstday=False
    blood = 0
    pain = 0
    painkiller = False




    
    
    def __init__(self, parent):
        super().__init__(parent)
        conf_button = wx.Button(self, label='Confirm')
        conf_button.Bind(wx.EVT_BUTTON, self.on_conf)


        
        dateselector=wx.adv.GenericCalendarCtrl(self, name="datectrl")
        markstyle=wx.adv.CalendarDateAttr(colBack='green')
        # for daytomark in getpastentries():
        #     dateselector.SetAttr(5,markstyle)
        month = 8
        monthentrylist=getmonthentries(month)
        print(monthentrylist)
        for daytomark in monthentrylist:
            dateselector.SetAttr(daytomark,markstyle)
        

        firstcheck=wx.CheckBox(self, label="first day of bleeding/pain? (all days from last entry will be marked pain/bloodfree)",
         name='firstday_check_box')
        firstcheck.Bind(wx.EVT_CHECKBOX, self.on_firstdaycheck)

        bloodbox=wx.RadioBox(self, label="bleeding amount",
          choices=['0','1','2','3','4','5','6','7','8','9','10'], majorDimension=0, style=wx.RA_SPECIFY_COLS,
         name='blood_radio_box')
        bloodbox.Bind(wx.EVT_RADIOBOX, self.on_bloodbox)
        painbox=wx.RadioBox(self, label="pain amount",
          choices=['0','1','2','3','4','5','6','7','8','9','10'], majorDimension=0, style=wx.RA_SPECIFY_COLS,
         name='pain_radio_box')
        painbox.Bind(wx.EVT_RADIOBOX, self.on_painbox)

        painkillercheck=wx.CheckBox(self, label="took painkiller?",
         name='painkiller_check_box')
        painkillercheck.Bind(wx.EVT_CHECKBOX, self.on_painkillercheck)

        
        main_sizer = wx.BoxSizer(wx.VERTICAL)
        
        main_sizer.Add(dateselector, proportion=1,
                       flag=wx.ALL | wx.CENTER | wx.EXPAND,
                       border=5)
        main_sizer.Add(firstcheck, proportion=1,
                       flag=wx.ALL | wx.CENTER | wx.EXPAND,
                       border=5)
        main_sizer.Add(bloodbox, proportion=1,
                       flag=wx.ALL | wx.CENTER | wx.EXPAND,
                       border=5)
        main_sizer.Add(painbox, proportion=1,
                       flag=wx.ALL | wx.CENTER | wx.EXPAND,
                       border=5)
        main_sizer.Add(painkillercheck, proportion=1,
                       flag=wx.ALL | wx.CENTER | wx.EXPAND,
                       border=5)
        main_sizer.Add(conf_button, proportion=1,
                       flag=wx.ALL | wx.CENTER | wx.EXPAND,
                       border=5)
        self.SetSizer(main_sizer)

    
    def on_firstdaycheck(self, event):
        self.firstday=event.IsChecked()

    def on_bloodbox(self, event):
        self.blood = event.GetSelection()
    
    def on_painbox(self, event):
        self.pain=event.GetSelection()

    def on_painkillercheck(self, event):
        self.painkiller=event.IsChecked()

    def on_conf(self, event):
        createentry(self.year, self.month, self.day, self.firstday,self.blood, self.pain, self.painkiller)
        exit()    
        
class MyFrame(wx.Frame):
    
    def __init__(self):
        super().__init__(None, title='Red Calendar', size=(400, 400))
        panel = MyPanel(self)
        
        self.Show()
if __name__ == '__main__':
    app = wx.App(redirect=False)
    frame = MyFrame()
    app.MainLoop()