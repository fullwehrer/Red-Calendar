#GUI Tutorial used: https://www.blog.pythonlibrary.org/2021/09/29/create-gui/



import wx
import wx.adv
from datetime import datetime



import filehandling



global savefile 
savefile ='redcalendar_testing.csv'


#def showdata():




def getmonthentries(month):
    pastentries=filehandling.getpastentries(savefile)
    pastentries = [row for row in pastentries if row[1]==month]
    return([row[2] for row in pastentries])






class MyPanel(wx.Panel):
    


    def markdays(self, dateselector, markstyle):
            monthentrylist=getmonthentries(self.month)
            for daytomark in monthentrylist:
                dateselector.SetAttr(daytomark,markstyle)

    
    
    def __init__(self, parent):
        super().__init__(parent)
        
        now = datetime.now()
        self.year = int(now.strftime("%Y")) #default
        self.month = int(now.strftime("%m")) #default
        self.day = int(now.strftime("%d")) #default
        self.firstday=False
        self.blood = 0
        self.pain = 0
        self.painkiller = False

        
        self.dateselector=wx.adv.GenericCalendarCtrl(self, name="datectrl")
        self.dateselector.Bind(wx.adv.EVT_CALENDAR_SEL_CHANGED,self.on_selectionchanged)
        self.markstyle=wx.adv.CalendarDateAttr(colBack='green')
        self.markdays(self.dateselector, self.markstyle)

        firstcheck=wx.CheckBox(self, label="first entry since last bleeding/pain? (all days from last entry will be marked pain/bloodfree)",
            name='firstday_check_box')
        firstcheck.Bind(wx.EVT_CHECKBOX, self.on_firstdaycheck)

        bloodbox=wx.RadioBox(self, label="bleeding amount",
            choices=['0','1','2','3','4','5'], majorDimension=0, style=wx.RA_SPECIFY_COLS,
            name='blood_radio_box')
        bloodbox.Bind(wx.EVT_RADIOBOX, self.on_bloodbox)
        painbox=wx.RadioBox(self, label="pain amount (Mankoski Pain Scale - http://www.valis.com/andi/painscale.html)",
            choices=['0','1','2','3','4','5','6','7','8','9','10'], majorDimension=0, style=wx.RA_SPECIFY_COLS,
            name='pain_radio_box')
        painbox.Bind(wx.EVT_RADIOBOX, self.on_painbox)

        painkillercheck=wx.CheckBox(self, label="took painkiller?",
            name='painkiller_check_box')
        painkillercheck.Bind(wx.EVT_CHECKBOX, self.on_painkillercheck)

        conf_button = wx.Button(self, label='Confirm')
        conf_button.Bind(wx.EVT_BUTTON, self.on_conf)

        
        main_sizer = wx.BoxSizer(wx.VERTICAL)
        
        main_sizer.Add(self.dateselector, proportion=1,
                       flag=wx.ALL | wx.CENTER | wx.EXPAND,
                       border=5)
        main_sizer.Add(firstcheck, proportion=1,
                       flag=wx.ALL | wx.CENTER | wx.EXPAND,
                       border=5)
        main_sizer.Add(bloodbox, proportion=1,
                       flag=wx.ALL | wx.CENTER | wx.EXPAND,
                       border=5)
        main_sizer.Add(painbox, proportion=1,
                       flag=wx.ALL | wx.CENTER | wx.EXPAND,
                       border=5)
        main_sizer.Add(painkillercheck, proportion=1,
                       flag=wx.ALL | wx.CENTER | wx.EXPAND,
                       border=5)
        main_sizer.Add(conf_button, proportion=1,
                       flag=wx.ALL | wx.CENTER | wx.EXPAND,
                       border=5)
        self.SetSizer(main_sizer)


    


    def on_selectionchanged(self, event):
        date=event.PyGetDate()
        self.day=date.day
        self.month=date.month
        self.year=date.year
        # self.__init__.markdays(self) (funktioniert noch nicht)
        
            

        
    

    def on_firstdaycheck(self, event):
        self.firstday=event.IsChecked()

    def on_bloodbox(self, event):
        self.blood = event.GetSelection()
    
    def on_painbox(self, event):
        self.pain=event.GetSelection()

    def on_painkillercheck(self, event):
        self.painkiller=event.IsChecked()

    def on_conf(self, event):
        if filehandling.checkentryexists(savefile, self.year, self.month, self.day):
            print('popper?')
            popper=wx.MessageDialog(None, 'really?', ABC, wx.YES_NO).ShowModal()

        # filehandling.createentry(savefile, self.year, self.month, self.day, self.firstday,self.blood, self.pain, self.painkiller)
        filehandling.orderbydate(savefile)
        exit()    
        
class MyFrame(wx.Frame):
    
    def __init__(self):
        super().__init__(None, title='Red Calendar', size=(400, 400))
        panel = MyPanel(self)
        
        self.Show()



if __name__ == '__main__':
    app = wx.App(redirect=False)
    frame = MyFrame()
    app.MainLoop()